// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Property extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Property entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Property must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Property", id.toString(), this);
    }
  }

  static load(id: string): Property | null {
    return changetype<Property | null>(store.get("Property", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get golfclub(): string | null {
    let value = this.get("golfclub");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set golfclub(value: string | null) {
    if (!value) {
      this.unset("golfclub");
    } else {
      this.set("golfclub", Value.fromString(<string>value));
    }
  }

  get property_id(): i32 {
    let value = this.get("property_id");
    return value!.toI32();
  }

  set property_id(value: i32) {
    this.set("property_id", Value.fromI32(value));
  }

  get value(): i32 {
    let value = this.get("value");
    return value!.toI32();
  }

  set value(value: i32) {
    this.set("value", Value.fromI32(value));
  }
}

export class Golfclub extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Golfclub entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Golfclub must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Golfclub", id.toString(), this);
    }
  }

  static load(id: string): Golfclub | null {
    return changetype<Golfclub | null>(store.get("Golfclub", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get player(): Bytes | null {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set player(value: Bytes | null) {
    if (!value) {
      this.unset("player");
    } else {
      this.set("player", Value.fromBytes(<Bytes>value));
    }
  }

  get properties(): Array<string> | null {
    let value = this.get("properties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set properties(value: Array<string> | null) {
    if (!value) {
      this.unset("properties");
    } else {
      this.set("properties", Value.fromStringArray(<Array<string>>value));
    }
  }

  get golfclubid(): i32 {
    let value = this.get("golfclubid");
    return value!.toI32();
  }

  set golfclubid(value: i32) {
    this.set("golfclubid", Value.fromI32(value));
  }
}

export class Material extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Material entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Material must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Material", id.toString(), this);
    }
  }

  static load(id: string): Material | null {
    return changetype<Material | null>(store.get("Material", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class MaterialBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MaterialBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MaterialBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MaterialBalance", id.toString(), this);
    }
  }

  static load(id: string): MaterialBalance | null {
    return changetype<MaterialBalance | null>(store.get("MaterialBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get material(): string {
    let value = this.get("material");
    return value!.toString();
  }

  set material(value: string) {
    this.set("material", Value.fromString(value));
  }

  get balance(): i32 {
    let value = this.get("balance");
    return value!.toI32();
  }

  set balance(value: i32) {
    this.set("balance", Value.fromI32(value));
  }
}

export class Part extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Part entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Part must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Part", id.toString(), this);
    }
  }

  static load(id: string): Part | null {
    return changetype<Part | null>(store.get("Part", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class PartBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartBalance", id.toString(), this);
    }
  }

  static load(id: string): PartBalance | null {
    return changetype<PartBalance | null>(store.get("PartBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get part(): string {
    let value = this.get("part");
    return value!.toString();
  }

  set part(value: string) {
    this.set("part", Value.fromString(value));
  }

  get balance(): i32 {
    let value = this.get("balance");
    return value!.toI32();
  }

  set balance(value: i32) {
    this.set("balance", Value.fromI32(value));
  }
}

export class LandPartBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LandPartBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LandPartBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LandPartBalance", id.toString(), this);
    }
  }

  static load(id: string): LandPartBalance | null {
    return changetype<LandPartBalance | null>(store.get("LandPartBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get land(): string {
    let value = this.get("land");
    return value!.toString();
  }

  set land(value: string) {
    this.set("land", Value.fromString(value));
  }

  get part(): string {
    let value = this.get("part");
    return value!.toString();
  }

  set part(value: string) {
    this.set("part", Value.fromString(value));
  }

  get balance(): i32 {
    let value = this.get("balance");
    return value!.toI32();
  }

  set balance(value: i32) {
    this.set("balance", Value.fromI32(value));
  }
}

export class GolfLand extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GolfLand entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GolfLand must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GolfLand", id.toString(), this);
    }
  }

  static load(id: string): GolfLand | null {
    return changetype<GolfLand | null>(store.get("GolfLand", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): i32 {
    let value = this.get("collection");
    return value!.toI32();
  }

  set collection(value: i32) {
    this.set("collection", Value.fromI32(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get parts(): Array<string> | null {
    let value = this.get("parts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set parts(value: Array<string> | null) {
    if (!value) {
      this.unset("parts");
    } else {
      this.set("parts", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class StoragePartBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StoragePartBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StoragePartBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StoragePartBalance", id.toString(), this);
    }
  }

  static load(id: string): StoragePartBalance | null {
    return changetype<StoragePartBalance | null>(
      store.get("StoragePartBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parts_storage(): string {
    let value = this.get("parts_storage");
    return value!.toString();
  }

  set parts_storage(value: string) {
    this.set("parts_storage", Value.fromString(value));
  }

  get part(): string {
    let value = this.get("part");
    return value!.toString();
  }

  set part(value: string) {
    this.set("part", Value.fromString(value));
  }

  get balance(): i32 {
    let value = this.get("balance");
    return value!.toI32();
  }

  set balance(value: i32) {
    this.set("balance", Value.fromI32(value));
  }
}

export class PartsStorage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartsStorage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartsStorage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartsStorage", id.toString(), this);
    }
  }

  static load(id: string): PartsStorage | null {
    return changetype<PartsStorage | null>(store.get("PartsStorage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get parts(): Array<string> | null {
    let value = this.get("parts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set parts(value: Array<string> | null) {
    if (!value) {
      this.unset("parts");
    } else {
      this.set("parts", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get golfclubs(): Array<string> | null {
    let value = this.get("golfclubs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set golfclubs(value: Array<string> | null) {
    if (!value) {
      this.unset("golfclubs");
    } else {
      this.set("golfclubs", Value.fromStringArray(<Array<string>>value));
    }
  }

  get golfclubs_player(): Array<string> | null {
    let value = this.get("golfclubs_player");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set golfclubs_player(value: Array<string> | null) {
    if (!value) {
      this.unset("golfclubs_player");
    } else {
      this.set("golfclubs_player", Value.fromStringArray(<Array<string>>value));
    }
  }

  get materials(): Array<string> | null {
    let value = this.get("materials");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set materials(value: Array<string> | null) {
    if (!value) {
      this.unset("materials");
    } else {
      this.set("materials", Value.fromStringArray(<Array<string>>value));
    }
  }

  get parts(): Array<string> | null {
    let value = this.get("parts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set parts(value: Array<string> | null) {
    if (!value) {
      this.unset("parts");
    } else {
      this.set("parts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get lands(): Array<string> | null {
    let value = this.get("lands");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set lands(value: Array<string> | null) {
    if (!value) {
      this.unset("lands");
    } else {
      this.set("lands", Value.fromStringArray(<Array<string>>value));
    }
  }

  get lands_manager(): Bytes | null {
    let value = this.get("lands_manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lands_manager(value: Bytes | null) {
    if (!value) {
      this.unset("lands_manager");
    } else {
      this.set("lands_manager", Value.fromBytes(<Bytes>value));
    }
  }
}

export class PartRecipe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartRecipe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartRecipe must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartRecipe", id.toString(), this);
    }
  }

  static load(id: string): PartRecipe | null {
    return changetype<PartRecipe | null>(store.get("PartRecipe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get material_ids(): Array<string> | null {
    let value = this.get("material_ids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set material_ids(value: Array<string> | null) {
    if (!value) {
      this.unset("material_ids");
    } else {
      this.set("material_ids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get material_amounts(): Array<i32> | null {
    let value = this.get("material_amounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toI32Array();
    }
  }

  set material_amounts(value: Array<i32> | null) {
    if (!value) {
      this.unset("material_amounts");
    } else {
      this.set("material_amounts", Value.fromI32Array(<Array<i32>>value));
    }
  }
}
